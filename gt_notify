#!/usr/bin/env python3
import notify2
import subprocess
import argparse
from html import escape as html_escape
import gt

class SeeAlso:
    """Wrapper for ``--see-also`` argument value"""
    VALUE_NO = -1
    VALUE_YES = -2

    def __init__(self, arg):
        if arg == 'no':
            self.value = SeeAlso.VALUE_NO
        elif arg == 'yes':
            self.value = SeeAlso.VALUE_YES
        else:
            self.value = int(arg)
            if self.value < 0:
                raise ValueError('--see-also argument is negative')

    def __bool__(self):
        return self.value != SeeAlso.VALUE_NO

    def slice_off(self, see_also):
        """
        Returns a slice of a see_also array to be mapped to notification actions
        according to argument value.
        """
        if self.value == SeeAlso.VALUE_NO:
            return []
        elif self.value == SeeAlso.VALUE_YES:
            return see_also
        else:
            return see_also[:self.value]

def main():
    parser = argparse.ArgumentParser(
        description='xsel/libnotify Google Translate client',
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-S', '--selection',
                        choices=['primary', 'secondary', 'clipboard'],
                        default='primary',
                        help='specify a selection buffer to read from')

    parser.add_argument('--timeout', type=float, default=0,
                        help='notification timeout or 0 (default) to show '
                             'until closed')

    parser.add_argument('-T', '--source-translit', action='store_true',
                        help='include source transliteration')

    parser.add_argument('-t', '--translit', action='store_true',
                        help='include translation transliteration')

    parser.add_argument('-c', '--correct', action='store_true',
                        help='auto-correct the original text (or transcribe to '
                             'a different writing system)')

    parser.add_argument('-a', '--see-also', metavar='{no,yes,<number>}',
                        type=SeeAlso, default='no', help='''\
map the "see also" list to notification actions.
    "no": do not map;
    "yes": map all;
    <number>: map first <number> entries only.''')

    parser.add_argument('-o', '--original', action='store_true',
                        help='show original text')

    parser.add_argument('-L', '--interface-lang',
                        help='specify the interface language (that is, language'
                             ' of speech part names)')
    parser.add_argument('--text', help='specify text to translate')

    parser.add_argument('source_lang',
                        help='source language code, or \'auto\' to auto-detect')
    parser.add_argument('target_lang',
                        help='target language code')

    args = parser.parse_args()

    messing_with_mainloop = bool(args.see_also)

    if args.text:
        text = args.text
    else:
        text = subprocess.check_output(['xsel', '-o', '--' + args.selection],
                                       universal_newlines=True)

    params_stack = [(args.source_lang, args.target_lang, text)]

    notify2.init('gt_notify',
                 mainloop='glib' if messing_with_mainloop else None)

    def get_translation(source_lang, target_lang, text):
        return gt.get_translation(
            source_lang=source_lang, target_lang=target_lang, text=text,
            include_translit=args.translit or args.source_translit,
            include_variants=True,
            include_segments=False,
            include_examples=False,
            include_definitions=False,
            include_see_also=bool(args.see_also),
            include_synonyms=False,
            suggest_language=False,
            correct_typos=args.correct,
            interface_lang=args.interface_lang)

    def show_notification(source_lang, target_lang, text):
        translation = get_translation(source_lang, target_lang, text)
        if translation.correction.corrected_text:
            translation = get_translation(source_lang, target_lang,
                                          translation.correction.corrected_text)

        notification = notify2.Notification(summary=None)
        notification.timeout = args.timeout or notify2.EXPIRES_NEVER

        summary, message = '', ''

        if args.original:
            summary += '{}\n'.format(html_escape(translation.original))

        if args.source_lang == 'auto':
            summary += '(Language detected: {})\n'.format(
                html_escape(translation.source_lang))

        if args.source_translit and translation.original_translit:
            message += '<i>{}</i>\n'.format(html_escape(
                translation.original_translit))

        if translation.variant_groups:
            message += '<b>{}</b>\n'.format(
                html_escape(translation.translation))
        else:
            message += '{}\n'.format(html_escape(translation.translation))

        if args.translit and translation.translation_translit:
            message += '<i>{}</i>\n'.format(html_escape(
                translation.translation_translit))

        for group in translation.variant_groups:
            variants = (v.translation for v in group.variants)
            message += '\n<u>{}</u>: {}\n'.format(
                html_escape(group.speech_part),
                html_escape(', '.join(variants)))

        if args.see_also:
            see_also = args.see_also.slice_off(translation.see_also)

            def callback(_, action):
                notification.close()
                if action.startswith('sa_'):
                    index = int(action[len('sa_'):])
                    new_params = (source_lang, target_lang, see_also[index])
                    params_stack.append(new_params)

            for index, word in enumerate(see_also):
                notification.add_action('sa_{}'.format(index), word, callback)

        notification.update(summary.strip(), message.strip())
        notification.show()

        if messing_with_mainloop:
            from gi.repository import GLib
            main_loop = GLib.MainLoop()
            notification.connect('closed', lambda reason: main_loop.quit())
            main_loop.run()

    for source_lang, target_lang, text in params_stack:
        show_notification(source_lang, target_lang, text)

if __name__ == '__main__':
    main()
